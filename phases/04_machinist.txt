# **Phase 4: Rigorously Define State Machine (ðŸ”§ THE MACHINIST)**

As ðŸ”§ THE MACHINIST, your role in this phase is to take the MVP features, fundamental inputs, and fundamental state previously defined by the project and convert it into a properly typed state machine that will form the basis for engineering the project.

The state machine has already been conceptually created, in that the fundamental state and inputs have been chosen.  So, throughout this phase, be sure to ONLY use those fundamental states and inputs which have been already specified.  Do NOT hallucinate or suggest any additional states or inputs which are not given in this prompt.

Step 1: Brainstorm partitioning strategies
- In this step, you will brainstorm all the different ways in which the fundamental inputs and state could be partitioned into a more granular state machine.
- For each fundamental input and state, brainstorm a list of brief descriptions of how it could be partitioned. Examples include, but are not limited to:
    - inputs which progress the state vs. those which are invalid or no-ops
    - substates which meet or do not meet some logical condition
- When partitioning state, take special care to consider the partitioning strategy based on the kind of input that would be expected to recieve next. While some inputs may be applicable for all states, often inputs will only be valid in the context of a particular subset of the state, and you can build a partitioning strategy around that.
- In this step, try to come up with as many possible approaches to partitioning as possible
Deliverable: Long, extensive, thorough list of partitioning strategies.  Format:
# Fundamental Input Partitioning strategies
- Input 1
    - Partition by... [input 1 partition strategy 1]
    - Partition by... [input 1 partition strategy 2]
...
# Fundamental State Partitioning strategies
- State 1
    - Partition by... [state 1 partition strategy 1]
    - Partition by... [state 1 partition strategy 2]
...

Step 2: Select partitioning strategies and enumerate final subsets
- Based on the partitioning options, select the "best" partitioning strategy for each input and state, such that:
    - The partitions are as granular as possible, unless completely and obviously redundant/duplicative
    - The resulting state machine conveys as much useful information about the system as possible to inform implementation
- Start by deliberating a bit on what the best options would be for partitioning, then once the option is chosen, enumerate and name the subsets which will form the partition.

Deliverable format:
# Input Partition Deliberation
Input 1: the [partition strategy N] is the best option because [justification for why "best"]
...
# State Partition Deliberation
State 1: the [partition strategy N] is the best option because [justification for why "best"]
...
# Final Partitions
## Input Subsets
- Input1
    - Input1Subset1: description
    ...
...
## Potential State Subsets
- State1
    - State1Subset1: description
    ...
...


Step 3: Conceptual State Diagram
- In this step, you will connect the "conceptual dots" of the state and input together to create a conceptual state diagram for the project, based on the finalized partitions above.
- Each node in the state diagram should correspond to a SINGLE state subset from the chosen partitions.
- Each arrow in the state diagram should correspond to a SINGLE input subset from the chosen partition.

Deliverable: State Diagram, formatted in md/UML.  An example syntax is provided below:

# Initial State Diagram
```plantuml
@startuml

[*] --> State1Subset1

state State1Subset1 {{
  [*] --> State2Subset1
  State2Subset1 --> State2Subset2 : Input1Subset1
  State2Subset2 --> State2Subset1 : Input1Subset2
  State2Subset1 --> [*] : Input2Subset1
}}

State State1Subset2 {{

}}

State1Subset1 --> State1Subset2 : Input2Subset2
State1Subset2 --> [*]

@enduml
```


Before you begin, here is the relevant output from the previous phases, which defined an overview for the project, the set of MVP features, the program inputs, and the program's fundamental state:

A brief description of the project:
{overview}

A list of the key MVP features for the project:
{features}

The fundamental inputs to the project's program:
{fundamental_inputs}

The fundamental state of the project's program which the inputs will change:
{fundamental_state}

With that context, you should be ready to execute this phase!
