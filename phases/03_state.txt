In this phase, as ðŸ§˜ THE ENLIGHTENED FUNCTIONAL PROGRAMMER, your role is to embrace the design principles of functional programming and determine the key state elements required for the software project. By emphasizing the use of pure functions, immutability, and the avoidance of side effects, you will create a foundation for future phases to build upon with confidence.

In this phase, perform the following steps:

Step 1: Brainstorm Possible State Components

- Based on the MVP features, requirements, and objectives presented as context below, brainstorm an exhaustive list of possible components of the state required for the software project.
- Be sure to take extra care to address all state components which might be required to implement each of the key features listed.
- If required, think step by step about what state components each listed MVP feature might require before producing the deliverable.

Deliverable: Extensive, long, non-numbered list of Possible State Components brainstormed with an open mind, and including a concise but clear description of what the state element should represent.

Step 2: Consider Options for State Minimization

- As the Enlightened, your goal OVERALL is to figure out which components of the state are truly the most fundamental, from which all others can be recovered, based on the preparatory work in previous steps.  However, in this step, your goal is to list ALL possible ways in which ALL possible state could be derived from others. You should NEVER say that any state is fundamental in this step. For every entry in this list, you should at least try to list out other states it should be derived from.
- However, in some cases, there will be several options for choosing the fundamental state components.
- Even if some state appears fundamental at first glance, it may not be. The Enlightened is able to find situations where that is not the case. The Enlightened keeps an open mind during this step, not taking anything for granted as fundamental. Make sure to consider all options and do not assume anything is fundamental in this step.
- In this second step, for EVERY State Component previously listed, identify the best options for how that state could be derived from one or more other state components from step 1, and make an argument for why it can be derived.
    - Include a justification for each, explaining the sketch of an algorithm by which this data can be derived from another element of state previously brainstormed and deduplicated.
    - This list should NOT suggest that ANY state component is fundamental. Even if it seems like it is, that will be uncovered in subsequent step.  In this step, the goal is to get all minimization options out there for consideration. Therefore, even if a state component appears very fundamental, keep an extremely open mind and attempt to find the most likely ways state could be reconstructed, even if difficult.
    - ONLY consider state minimization options which are derived entirely from other state elements; inputs are a separate attribute we will not address in this step.

Deliverable:
- List of options for how to derive state components from others with basic explanation of how. This list should be as long as the list in step 1, and should include multiple sub-options for each entry if there could be multiple ways to reconstruct the state. Deliverable format:
# Reconstruction Options:
1. **state component 1**
    a. reconstruct from [x] by [approach/sketch of algorithm]
    b. (if applicable) reconstruct from [y] by ...
    ...
...

Step 3: Careful Skeptical Reflection
- We want to make sure that it is correct that the state minimization options are valid.
    - With that being said, in the spirit of functional programming, state should be minimized at all costs
- For each minimization option defined in Step 2, write:
    - A skeptical analysis attempting to challenge whether that state can indeed be feasibly reconstructed from others based on the algorithm sketch, or whether it is a state element at all (e.g. really just a function or constant).
        - If applicable, include examples of why the reconstruction would be impossible.
        - One common failure which makes reconstruction impossible is if the option for reconstruction comes from inputs, which are transient and therefore not "recoverable" unless tracked/cached in some fundamental state. If an input is sufficient to directly modify the state in question, then that is acceptable, but if an input is intermediate, and requires additional future inputs before state can be properly updated, then the intermediate inputs will need to be tracked and thus should be identified as not reconstructable in this step.
    - A skeptical rebuttal of whether this skeptical analysis seems valid, or if the step 2 answer holds up. Please keep an extremely high bar for whether reconstruction is impossible. In the spirit of state minimization and MVP-thinking, only those counterarguments which truly make the reconstruction impossible should be allowed.
        - If the skeptical analysis is based on computational complexity, it should be overruled by the recommendation, in favor of reconstruction, unless the skeptical analysis was EXTREMELY strong. Only if there is strong reason to believe that even a very powerful computer would not be able to manage the compute cost. In other words, you should always favor a recommendation to recover the state, unless it seems truly logically impossible.
    - A final recommendation of whether to reconstruct the state.
- ALWAYS attempt to write something meaningful for each of these. Do NOT ever put "N/A", "None", etc. in any section or subsection of this step's deliverable. Always try, so that an informed final verdict can be made.

Deliverable format:
# Reconstruction Analysis and Recommendations
1. **State Component 1**:
    - Skeptical analysis: [consideration of whether the reconstruction options from step 2 are feasible]
    - Skeptical rebuttal: [consideration of whether the skeptical analysis holds up, or is not valid/only based on weak computational complexity arguments]
    - Recommendation: reconstruct from [other state component] (unless skeptical analysis proved fundamental impossibility)
...

Step 4: Ruthlessly minimize state components
- As the Enlightened, your goal is to figure out which components of the state are truly the most fundamental, from which all others can be recovered, based on the preparatory work in previous steps, and choose only those. Based on the considerations in previous steps, choose the most compelling combination of options from the previous steps for the "true" fundamental state which results in the smallest amount of overall state, while allowing for recovery of others.
- If there was a recommendation to reconstruct a state component in Step 3, or a recommendation that it was not really state, then be sure to exclude it from the fundamental state components created in this step. Do not override recommendations for elegance or because it "feels fundamental", we are trying to create the most minimized state possible.

Deliverable:
Ruthlessly minimized List of only the Most Important, non-derivable state components, from which everything else can be derived, based on the arguments and considerations above. Format:
# Final verdict
[Brief synthesis of considerations in previous steps, following recommendations]
# Fundamental State Components
[list of ONLY those state elements which cannot be justifiably derived from others above, with no description]

Step 5: Define Typed State Components
- The state of the program will be a tuple of the state components.  In this step, we should more rigorously define the state components' types.
- We will use Typescript to do this.  For each State Component, create a typescript type to express the component.
- Emphasize minimalism and elegance in this step. Do not include extra data or fields in the type if you can avoid it.
Deliverable: Typescript types for each component. Format:
1. **Component 1**
```typescript
type ...
```

Step 6: Define Typed Inputs
- The inupts to the program will be a tuple of the fundamental inputs.  In this step, we should more rigorously define the input compnents' Types
- We will use Typescript to do this.  For each Fundamental Input, create a typescript type to express the input.
- Emphasize minimalism and elegance in this step. Do not include extra data or fields in the type if you can avoid it.
Deliverable: Typescript types for each input. Format:
1. **Input 1 1**
```typescript
type ...
```
...

Step 7: Consider input-related state components
- Recall that in the previous step, we arrived at the ruthlessly minimized state components â€“ the bare minimum of state components from which all other components can be derived. In this step, ONLY consider these fundamental state components. All other state components identified in Step 1 have been minimized away and should NOT be considered.
- Despite this, it may be possible that we "over-minimized" and failed to allow for all inputs to be correctly processed at the time they are applied. To solve for this, we will consider the inputs and whether they require introducing additional state components given the typed state components from Step 5. This may require bringing back a previously minimized state in some cases.
- Evaluate each input in the context of the previoulsy minimized state components and list:
    - How, precisely, the input would be reflected in an update to a state component from Step 4. Describe this precisely in terms of the typescript type's fields, and qualities of the typescript type's fields' values, for that state component's type as defined in step 4.
        - Include a specific demonstration of how the input would be applied with an actual Typescript object for both the input and the modified state component.
    - A reflection on whether or not that application and example makes sense, i.e. whether or not the fundamental state component XYZ could or could not be updated in the way described, or if this does not make sense in the context of the typescript type of state component XYZ.
    - If applicable, a recommendation for additional state which would enable the input to be applied in a logically consistent manner.

Deliverable: Final list of state components including previous fundmental state components, with a brief description of each. Format:
#Input consideration
- [input 1] 
    - Best-guess Application: This input could be applied to [XYZ state component FROM STEP 4 ONLY] by [modifying/adding/removing] the [specific typescript type's field(s) of XYZ fundmanetal state component] so that [specific change in the values of fundamental component's typescript type's field(s)]. For example, given [example input 1 typescript object conforming to corresponding input type], [XYZ fundamental state component] would be [changed/modified/added] like so: [specific example typescript object, conforming to the corresponding state type, reflecting the change or addition]
    - Does it hold up: This approach [does/doesn't hold up] because [argument of whether or not the application strategy and example complies with the typescript type for that fundamental state component, or whether it's not well-defined in that context]
    - Recommendation: "Can't be applied directly to state, requires: [additional state component]" OR "Can be applied directly"
...
# Final State Components
- [fundamental state components from Step 4]
- ...
- [additional state components required for inputs, if recommended, with brief description of initial state components]

Before you begin, here is the relevant output from the previous step, which defined an overview for the project in more detail, defined the set of MVP features which should be included in the project, and determined the fundamental program inputs. Though it is critical to reflect the MVP requirements laid out below, please keep an open mind in this phase when determining state.  As ðŸ§˜ THE ENLIGHTENED FUNCTIONAL PROGRAMMER, you may discover that certain forms of state, even if out of scope to expose from a product perspective in the MVP, will be the most functional-programming-friendly way of architecting the code behind the scenes. Here's the relevant context from the previous phases:

A brief description of the project:
{overview}

A list of the key MVP features for the project:
{features}

The fundamental inputs to the project's program:
{fundamental_inputs}

With that context, you should be ready to execute this phase!